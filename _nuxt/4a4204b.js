(window.webpackJsonp=window.webpackJsonp||[]).push([[8],{282:function(t,e,n){t.exports=n.p+"img/t1.0e690b5.png"},312:function(t,e,n){var content=n(332);content.__esModule&&(content=content.default),"string"==typeof content&&(content=[[t.i,content,""]]),content.locals&&(t.exports=content.locals);(0,n(39).default)("8ed4740c",content,!0,{sourceMap:!1})},328:function(t,e,n){t.exports=n.p+"img/productRule.0bbbf5a.png"},329:function(t,e,n){t.exports=n.p+"img/sumRule.9c34cba.svg"},330:function(t,e,n){t.exports=n.p+"img/password.12977f1.jpg"},331:function(t,e,n){"use strict";n(312)},332:function(t,e,n){var o=n(38)(!1);o.push([t.i,"main[data-v-4358813c]{margin:12vh 0;width:100vw;padding:0 15vw;display:flex;flex-direction:column;align-items:center;justify-content:center;grid-gap:30px;gap:30px}section[data-v-4358813c]{width:100%;display:grid;grid-template-columns:1fr;justify-items:center;grid-gap:20px;gap:20px}code[data-v-4358813c]{margin:10px 0}code[data-v-4358813c],h2[data-v-4358813c]{text-align:center}h2[data-v-4358813c]{justify-content:center;font-weight:600;line-height:30px}p[data-v-4358813c]{text-align:justify;font-weight:500;font-size:1rem;line-height:35px}img[data-v-4358813c]{max-height:50vh;width:auto;border-radius:15px}@media only screen and (max-width:720px){main[data-v-4358813c]{margin-bottom:5vh;padding:0 7.5vw}img[data-v-4358813c]{width:100%;height:auto;max-height:1000vh}}",""]),t.exports=o},372:function(t,e,n){"use strict";n.r(e);var o=[function(){var t=this,e=t.$createElement,o=t._self._c||e;return o("section",[o("img",{attrs:{src:n(282),"data-aos":"fade-down",alt:"counting"}}),t._v(" "),o("p",{attrs:{"data-aos":"fade-down"}},[t._v("\n       The starting lessons of Discrete Mathematical Structures in Computer\n      Science II were certainly not what I have expected. At first, I thought\n      we would dive deeper into the previous semester’s topic on linear\n      algebra and its applications in computer science. I was surprised when\n      we started off with a much easier topic of Basic Counting Principles.\n      Little did I know that this lesson would be the foundation of what was\n      yet to come.\n    ")]),t._v(" "),o("p",{attrs:{"data-aos":"fade-down"}},[t._v("\n       The main principles introduced in this lesson were the Product Rule and\n      the Sum Rule. The product rule or multiplication principle states that\n      if there are "),o("i",[t._v("a")]),t._v(" ways of doing something and "),o("i",[t._v("b")]),t._v(" ways of doing another\n      thing, then there are "),o("i",[t._v("a")]),t._v(" · "),o("i",[t._v("b")]),t._v(" ways of performing both actions.\n    ")]),t._v(" "),o("img",{attrs:{src:n(328),"data-aos":"fade-down",alt:"product rule"}}),t._v(" "),o("p",{attrs:{"data-aos":"fade-down"}},[t._v("\n       The Sum rule, on the other hand, states that if "),o("i",[t._v("a")]),t._v(" task can be done\n      either in one of "),o("i",[t._v("a")]),t._v(" ways or in one of "),o("i",[t._v("b")]),t._v(" ways, where none of the set of "),o("i",[t._v("a")]),t._v("\n      ways is the same as any of the set of "),o("i",[t._v("b")]),t._v(" ways, then there are "),o("i",[t._v("a")]),t._v("+"),o("i",[t._v("b")]),t._v(" ways to\n      do the task.\n    ")]),t._v(" "),o("img",{attrs:{src:n(329),"data-aos":"fade-down",alt:"sum rule"}}),t._v(" "),o("p",{attrs:{"data-aos":"fade-down"}},[t._v("\n       These principles can be applied in almost any field of mathematics but in the course, it is often used in\n      combinations and permutations. I was fascinated by how such a simple principle could be applied in so many\n      industries.\n      One common problem that intrigued me was the one below:\n    ")]),t._v(" "),o("code",[t._v("\n      How many strings are there of 5 lowercase alphabet letters that have the letter ‘x’ in them? The same letter can repeat multiple times in the same string?\n    ")]),t._v(" "),o("p",{attrs:{"data-aos":"fade-down"}},[t._v("\n       Since repeating is allowed, the number of strings of 5 lowercase alphabet letters is 26"),o("sup",[t._v("5")]),t._v(". To get the\n      string with an x in them we must subtract this with the number of strings without an x which is\n      25"),o("sup",[t._v("5")]),t._v(". Therefore, the answer is 26"),o("sup",[t._v("5")]),t._v("-25"),o("sup",[t._v("5")]),t._v(" which is equal to 2,115,751.\n    ")]),t._v(" "),o("p",{attrs:{"data-aos":"fade-down"}},[t._v("\n       As we seen above, the answers to these questions come by the millions. Assuming that this was a password for an\n      online system it's amazing how unlikely a user can just guess a password considering how large the result is.\n      It's much more mind-blowing if you realize that we know this fact by using the simple rules we\n      learned above.\n    ")]),t._v(" "),o("img",{attrs:{src:n(330),"data-aos":"fade-down",alt:"password"}})])}],r={mixins:[n(136).a],layout:"default",data:function(){return{title:"Basics of Counting"}},head:function(){return{title:"Basics of Counting"}}},d=(n(331),n(25)),component=Object(d.a)(r,(function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("main",[n("h2",[t._v(t._s(t.title))]),t._v(" "),t._m(0)])}),o,!1,null,"4358813c",null);e.default=component.exports}}]);